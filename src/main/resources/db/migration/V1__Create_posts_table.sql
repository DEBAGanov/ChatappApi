-- Создание таблицы posts
CREATE TABLE posts (
    id SERIAL PRIMARY KEY,
    title TEXT NOT NULL,
    content TEXT NOT NULL
);



-- Вставка тестовых данных
INSERT INTO posts (title, content) VALUES
('Какие знаете шаблоны проектирования? Расскажите о двух шаблонах, используемых в работе.', 'Существует множество шаблонов проектирования, которые используются в различных областях программирования. Расскажу о двух наиболее распространенных шаблонах:

`Фабричный метод (Factory method)` - это шаблон проектирования, который предоставляет интерфейс для создания объектов некоторого класса, но позволяет подклассам выбирать классы, которые должны быть созданы. То есть данный шаблон делегирует ответственность за создание объектов своим подклассам.
Пример использования фабричного метода может быть следующим: у вас есть базовый класс "Фигура", от которого наследуются классы "Круг", "Прямоугольник" и т.д. Каждый из этих классов должен уметь создавать объекты своего типа. В этом случае можно воспользоваться фабричным методом, чтобы вынести логику создания объектов в отдельный класс.


`Одиночка (Singleton)` - это шаблон проектирования, который гарантирует, что у класса есть только один экземпляр, а также предоставляет глобальную точку доступа к этому экземпляру.
Пример использования шаблона Одиночка может быть следующим: у вас есть класс, который предоставляет доступ к базе данных. В этом случае можно сделать этот класс Одиночкой, чтобы гарантировать, что у нас будет только один экземпляр класса, который будет работать с базой данных, и избежать проблем с несогласованными изменениями данных в разных экземплярах класса.'),
('Какие типы данных в Java? Чем отличается объект от простых типов данных?', 'В Java существует 8 простых типов данных:

+ `byte` - 8-битное целое число со знаком (-128 до 127)
+ `short` - 16-битное целое число со знаком (-32,768 до 32,767)
+ `int` - 32-битное целое число со знаком (-2,147,483,648 до 2,147,483,647)
+ `long` - 64-битное целое число со знаком (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807)
+ `float` - 32-битное число с плавающей точкой (1.4E-45 до 3.4028235E+38)
+ `double` - 64-битное число с плавающей точкой (4.9E-324 до 1.7976931348623157E+308)
+ `char` - 16-битный символ Unicode (''''\u0000'''' до ''''\uffff'''')
+ `boolean` - логическое значение (true или false)

Также в Java есть объектные типы данных, которые являются экземплярами классов, и могут хранить некоторые данные и иметь методы. Объекты могут хранить данные разных типов, даже простых типов данных. Например, объект типа Integer может хранить целое число типа int.

Разница между простыми типами данных и объектами заключается в способе хранения данных и доступе к ним. Простые типы данных хранятся в стеке, в то время как объекты - в куче. Объекты также могут иметь методы для обработки своих данных, тогда как простые типы данных этого не могут.'),
('В чем разница передачи параметров по ссылке и значению?', 'В Java все аргументы метода передаются по значению, то есть копируется значение переменной (даже если она ссылочного типа). Однако у ссылочных переменных копируется лишь значение ссылки, а не объекта, на который она ссылается. Поэтому, если произойдет изменение состояния объекта, на который ссылается переданная ссылка, то эти изменения будут отражены на объекте, на который ссылается исходная переменная. Таким образом, то, что большинство людей называют "передачей по ссылке", на самом деле называется "передачей значения ссылки".

Пример:
```java
public class Test {
    public static void main(String[] args) {
        StringBuffer str = new StringBuffer("hello");
        change(str);
        System.out.println(str);
    }

    public static void change(StringBuffer newStr) {
        newStr.append(" world");
    }
}
```
В этом примере метод change() принимает ссылку на объект StringBuffer и модифицирует его, добавляя к нему строку " world". В методе main() переменная str также ссылается на этот же самый объект StringBuffer, поэтому после вызова метода change() будет выведена строка "hello world".
'),
('Что такое JVM, JDK, JRE?', 'JVM, JDK и JRE - это три основных понятия в мире Java-разработки.

`JVM (Java Virtual Machine)` - виртуальная машина Java , которая выполняет Java-байткод. Все программы на Java компилируются в байткод, который может быть выполнен на любой платформе, на которую установлена JVM.

`JDK (Java Development Kit)` - это пакет разработчика Java , который включает в себя всё необходимое для разработки Java-приложений, включая компилятор javac, библиотеки классов, документацию, примеры кода и JVM.

`JRE (Java Runtime Environment)` - это пакет для запуска Java-приложений, который включает в себя JVM, библиотеки классов и другие необходимые компоненты для запуска Java-приложений.

Кратко говоря, если вы планируете разработку Java-приложений, то вам нужна JDK. Если же вы планируете только запускать Java-приложения, то вам достаточно установить JRE, которая включает в себя JVM.');
